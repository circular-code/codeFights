Some people are standing in a row in a park. There are trees between them which cannot be moved. Your task is to rearrange the people by their heights in a non-descending order without moving the trees. People can be very tall!

Example

For a = [-1, 150, 190, 170, -1, -1, 160, 180], the output should be
sortByHeight(a) = [-1, 150, 160, 170, -1, -1, 180, 190].

Input/Output

[execution time limit] 4 seconds (js)

[input] array.integer a

If a[i] = -1, then the ith position is occupied by a tree. Otherwise a[i] is the height of a person standing in the ith position.

Guaranteed constraints:
1 ≤ a.length ≤ 1000,
-1 ≤ a[i] ≤ 1000.

[output] array.integer

Sorted array a with all the trees untouched.

********** SOLUTION **********

function sortByHeight(a) {

    for (let i = 0; i < a.length; i++) {
        
        var curr = a[i],
            next,
            nextIndex = i+1;
        
        // look ahead to find next
        while (a[nextIndex] === -1) {
            nextIndex++;
        }
        next = a[nextIndex];
        
        // if there is nothing to switch with, return
        if (typeof next === 'undefined')
            return a;
        
        // else switch places if necessary
        else if (curr !== -1 && curr > next) {
            a[i] = next;
            a[nextIndex] = curr;
            
            // find previous item to start comparing again
            var previousIndex = i-1;
        
            while (a[previousIndex] === -1) {
                previousIndex--;
            }
        
            i = previousIndex -1 || 0;
        }
    }
    return a;
}
